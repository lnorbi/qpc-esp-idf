/*! @page api API Reference
@ifnot LATEX
@nav{tut_low,deprecated}
@endif

@section api_hsm State Machines
The QP Framework supports @ref srs_evt "event-driven", @ref srs_sm "hierarchical state machines" through the following bases classes:

<b>::QEvt class</b> (see also @ref api_dyn "Event Management")
- @ref ::QEvt "QEvt"
- Q_EVT_CAST()


<b>::QHsm class</b>
- @ref QHsm::QHsm_ctor()  "QHsm_ctor()"
- QHSM_INIT()
- QHSM_DISPATCH()
- @ref QHsm::QHsm_isIn()  "QHsm_isIn()"
- @ref QHsm::QHsm_state() "QHsm_state()"
- @ref QHsm::QHsm_top()   "QHsm_top()"


<b>::QMsm class derived from ::QHsm</b>
- ::QMsm class    (derived from ::QHsm)
- QHSM_INIT()     (inherited from ::QHsm)
- QHSM_DISPATCH() (inherited from ::QHsm)
- @ref QMsm::QMsm_ctor()      "QMsm_ctor()"
- @ref QMsm::QMsm_isInState() "QMsm_isInState()"
- @ref QMsm::QMsm_stateObj()  "QMsm_stateObj()"
- Q_STATE_CAST()


@section api_ao Active Objects
The QP Framework supports @ref srs_ao "Active Objects" through the following base classes.

<b>::QActive class</b>
- @ref QActive::QActive_ctor()   "QActive_ctor()"
- QACTIVE_START()
- QACTIVE_POST()
- QACTIVE_POST_X()
- QACTIVE_POST_LIFO()
- @ref QActive::QActive_defer()   "QActive_defer()"
- @ref QActive::QActive_recall()  "QActive_recall()"
- @ref QActive::QActive_flushDeferred() "QActive_flushDeferred()"
- @ref QActive::QActive_stop()    "QActive_stop()"

<b>Publish-Subscribe</b>
- @ref QActive::QActive_psInit()         "QActive_psInit()"
- @ref QActive::QActive_subscribe()      "QActive_subscribe()"
- @ref QActive::QActive_unsubscribe()    "QActive_unsubscribe()"
- @ref QActive::QActive_unsubscribeAll() "QActive_unsubscribeAll()"
- QACTIVE_PUBLISH()


<b>::QMActive class (derived from ::QActive)</b>
- @ref QMActive::QMActive_ctor() "QMActive_ctor()"
- QACTIVE_START()     (inherited from ::QActive)
- QACTIVE_POST()      (inherited from ::QActive)
- QACTIVE_POST_X()    (inherited from ::QActive)
- QACTIVE_POST_LIFO() (inherited from ::QActive)
- QACTIVE_PUBLISH()   (inherited from ::QActive)


@section api_dyn Dynamic (Mutable) Event Management
- @ref QF::QF_poolInit() "QF_poolInit()"
- Q_NEW()
- Q_NEW_X()
- Q_NEW_REF()
- Q_DELETE_REF()
- @ref QF::QF_gc() "QF_gc()"

<b>::QMPool class (for dynamic events, but also other objects)</b>
- @ref QMPool::QMPool_init()  "QMPool_init()"
- @ref QMPool::QMPool_get()   "QMPool_get()"
- @ref QMPool::QMPool_put()   "QMPool_put()"


@section api_time Time Management
<b>::QTimeEvt class</b>
- QTIMEEVT_TICK()
- @ref QTimeEvt::QTimeEvt_ctorX()   "QTimeEvt_ctorX()"
- @ref QTimeEvt::QTimeEvt_armX()    "QTimeEvt_armX()"
- @ref QTimeEvt::QTimeEvt_disarm()  "QTimeEvt_disarm()"
- @ref QTimeEvt::QTimeEvt_rearm()   "QTimeEvt_rearm()"
- @ref QTimeEvt::QTimeEvt_currCtr() "QTimeEvt_currCtr()"

<b>::QTicker active object (derived from ::QTimeEvt)</b>


@section api_queue Event Queues (raw thread-safe)
<b>::QEQueue class</b>
- @ref QEQueue::QEQueue_init()     "QEQueue_init()"
- @ref QEQueue::QEQueue_post()     "QEQueue_post()"
- @ref QEQueue::QEQueue_postLIFO() "QEQueue_postLIFO()"
- @ref QEQueue::QEQueue_get()      "QEQueue_get()"
- @ref QEQueue::QEQueue_getNFree() "QEQueue_getNFree()"
- @ref QEQueue::QEQueue_getNMin()  "QEQueue_getNMin()"
- @ref QEQueue::QEQueue_isEmpty()  "QEQueue_isEmpty()"


@section api_qs Software Tracing
@ref srs_qs "QS" is a software tracing system that enables developers to monitor live event-driven QP applications with minimal target system resources and without stopping or significantly slowing down the code. QS is an ideal tool for testing, troubleshooting, and optimizing QP applications. QS can even be used to support acceptance testing in product manufacturing.


@subsection api_qs_tx QS-Transmit (QS-TX)
- QS_INIT()
- @ref QS_tx::QS_initBuf()   "QS_initBuf()"
- @ref QS_tx::QS_getByte()   "QS_getByte()"
- @ref QS_tx::QS_getBlock()  "QS_getBlock()"
- @ref QS_tx::QS_onStartup() "QS_onStartup()"
- @ref QS_tx::QS_onCleanup() "QS_onCleanup()"
- @ref QS_tx::QS_onFlush()   "QS_onFlush()"
- @ref QS_tx::QS_onGetTime() "QS_onGetTime()"

<b>QS Filters</b>
- QS_GLB_FILTER()
- QS_LOC_FILTER()
- QS_FILTER_AP_OBJ()

<b>QS Dictionaries</b>
- QS_SIG_DICTIONARY()
- QS_OBJ_DICTIONARY()
- QS_OBJ_ARR_DICTIONARY()
- QS_FUN_DICTIONARY()
- QS_USR_DICTIONARY()
- QS_ENUM_DICTIONARY()

<b>QS Application-Specific Records</b>
- QS_BEGIN_ID()
- QS_END()
- QS_U8() / QS_I8()
- QS_U16() / QS_I16()
- QS_U32() / QS_I32()
- QS_ENUM()
- QS_STR()
- QS_MEM()
- ::QS_USER enumeration


@subsection api_qs_rx QS Receive-Channel (QS-RX)
- @ref QS_rx::QS_rxInitBuf() "QS_rxInitBuf()"
- @ref QS_rx::QS_rxParse()   "QS_rxParse()"
- @ref QS_rx::QS_onCommand() "QS_onCommand()"
- @ref QS_rx::QS_RX_PUT()    "QS_RX_PUT()"


@section api_qv QV (Cooperative Kernel)
@ref srs_qv "QV" is a simple **cooperative** kernel (previously called "Vanilla" kernel). This kernel executes active objects one at a time, with priority-based scheduling performed before processing of each event. Due to naturally short duration of event processing in state machines, the simple QV kernel is often adequate for many real-time systems.


@subsection api_qv_init Kernel Initialization and Control
- QV_INIT()
- <a href="qv_8c.html#a779a1bc9482e2d489dc87751cd100fdb">QF_run()</a>
- @ref QV::QV_onIdle() "QV_onIdle()"
- QV_CPU_SLEEP()


@section api_qk QK (Preemptive RTC Kernel)
@ref srs_qk "QK" is a lightweight **preemptive**, priority-based, run-to-completion (RTC) kernel designed specifically for executing event-driven active objects.

@subsection api_qk_ctrl Kernel Initialization and Control
- QK_INIT()
- <a href="qk_8c.html#a779a1bc9482e2d489dc87751cd100fdb">QF_run()</a>
- @ref QK::QK_onIdle()      "QK_onIdle()"
- @ref QK::QK_schedLock()   "QK_schedLock()"
- @ref QK::QK_schedUnlock() "QK_schedUnlock()"

<b>QK Interrupt Management</b>
- QK_ISR_ENTRY()
- QK_ISR_EXIT()


@section api_qxk QXK (Dual-Mode Kernel)
@ref srs_qxk "QXK" is a lightweight, **preemptive**, priority-based, dual-mode (run-to-completion/<b>blocking</b>) kernel that executes active objects like the @ref srs_qk "QK kernel", but can also execute traditional __blocking__ threads (extended threads). In this respect, QXK behaves exactly as a conventional __RTOS__ (Real-Time Operating System). QXK has been designed specifically for mixing event-driven active objects with traditional blocking code, such as commercial middleware (TCP/IP stacks, UDP stacks, embedded file systems, etc.) or legacy software.


@subsection api_qxk_ctrl Kernel Initialization and Control
- QXK_INIT()
- <a href="qxk_8c.html#a779a1bc9482e2d489dc87751cd100fdb">QF_run()</a>
- @ref QXK::QXK_onIdle()      "QXK_onIdle()"
- @ref QXK::QXK_schedLock()   "QXK_schedLock("
- @ref QXK::QXK_schedUnlock() "QXK_schedUnlock()"
- @ref QXK::QXK_onIdle()      "QXK_onIdle()"

<b>QXK Interrupt Management</b>
- QXK_ISR_ENTRY()
- QXK_ISR_EXIT()

<b>::QXThread class</b>
- @ref QXThread::QXThread_ctor()     "QXThread_ctor()"
- QXTHREAD_START()
- QXTHREAD_POST_X()
- Q_XTHREAD_CAST()
- @ref QXThread::QXThread_delay()    "QXThread_delay()"
- @ref QXThread::QXThread_delayCancel() "QXThread_delayCancel()"
- @ref QXThread::QXThread_queueGet() "QXThread_queueGet("
- @ref QXK::QXK_current()            "QXK_current()"
- QXK_TLS()


<b>QXThread Message Queues</b>
- QXTHREAD_POST_X() - posting messages to blocking threads
- QACTIVE_POST_X()  - posting events to Active Objects
- @ref QXThread::QXThread_queueGet() "QXThread_queueGet()"


<b>::QXSemaphore class</b>
- @ref QXSemaphore::QXSemaphore_init()    "QXSemaphore_init()"
- @ref QXSemaphore::QXSemaphore_wait()    "QXSemaphore_wait()"
- @ref QXSemaphore::QXSemaphore_tryWait() "QXSemaphore_tryWait()"
- @ref QXSemaphore::QXSemaphore_signal()  "QXSemaphore_signal()"


<b>::QXMutex class</b>
- @ref QXMutex::QXMutex_init()    "QXMutex_init()"
- @ref QXMutex::QXMutex_lock()    "QXMutex_lock()"
- @ref QXMutex::QXMutex_tryLock() "QXMutex_tryLock()"
- @ref QXMutex::QXMutex_unlock()  "QXMutex_unlock()"


@ifnot LATEX
@nav{tut_low,deprecated}
@endif
*/
##############################################################################
/*! @page deprecated Deprecated APIs

<b>The following QP/C APIs are now deprecated:</b>

*/
